package edu.nyu.cs.cs2580.ranking_model;

import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import edu.nyu.cs.cs2580.Document;
import edu.nyu.cs.cs2580.Index;


/**
 * Abstract class representing a ranking model for the Ranker. 
 */
public abstract class Model
{
	private Index _index;

	public Model(Index _index)
	{
		this._index = _index;
	}
	
	public Index get_index()
	{
		return _index;
	}

	public void set_index(Index _index)
	{
		this._index = _index;
	}
	
	/**
	 * Counts the term frequency within the document.
	 */
	public Map<String, Integer> getTermFrequency(Vector<String> documentVector){

		Map<String, Integer> termFrequency = new HashMap<String, Integer>();
		for(String dt : documentVector){
			if(termFrequency.containsKey(dt))
				termFrequency.put(dt, termFrequency.get(dt)+1);
			else
				termFrequency.put(dt, 1);
		}

		return termFrequency;
	}
	
	/**
	 * Computes the inverse document frequency.
	 * 
	 * @param term
	 * @return
	 */
	public Double getIDF(String term)
	{
		return 1d + Math.log(_index.numDocs()/(_index.documentFrequency(term)))/Math.log(2);
	}

	/**
	 * Returns the score generated by the given Model
	 * 
	 * @return
	 */
	public Double getScore(Vector<String> qv, Document d){
		
		Vector < String > dv = d.get_body_vector();
		
		double score = 0.0;
		for (int i = 0; i < dv.size(); ++i){
			for (int j = 0; j < qv.size(); ++j){
				if (dv.get(i).equals(qv.get(j))){
					score = 1.0;
					break;
				}
			}
		}
		
		return score;
	}
}
